---
# tasks file for TimeMachine
- name: Get the EFS operator csv info
  k8s_info:
    kind: PackageManifest
    name: "aws-efs-operator"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: efs_csv_info
  when: cluster_provider is defined and cluster_provider == 'aws'
- name: Install EFS operator
  k8s:
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: aws-efs-operator
        namespace: openshift-operators
      spec:
        channel: stable
        installPlanApproval: Automatic
        name: aws-efs-operator
        source: community-operators
        sourceNamespace: openshift-marketplace
        startingCSV: "{{ efs_csv_info.resources[0].status.channels[0].currentCSV }}"
  when: cluster_provider is defined and cluster_provider == 'aws'        
- name: create pvc for timemachine
  k8s:
     definition:
        kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: timemachine-pvc
          namespace: '{{ ansible_operator_meta.namespace }}'
        spec:
          storageClassName: "{{ persistentvolume.storageclass }}"
          accessModes:
            - ReadWriteMany
          resources:
            requests:
              storage: 50Mi
  when: cluster_provider is defined and cluster_provider == 'ibm'
- name: create config map timemachine-configmap
  k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: timemachine-configmap
        namespace: '{{ ansible_operator_meta.namespace }}'
      data:
        ld.so.preload: /opt/ssstm/$LIB/libssstm.so
- name: deploy timemachine
  k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: timemachine
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: timemachine
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: timemachine
        template:
          metadata:
            labels:
              app: timemachine
          spec:
            serviceAccount: timemachine-operator
            containers:
            - name: timemachine
              image: "{{ lookup('env','RELATED_IMAGE_TIMEMACHINE') }}"
              imagePullPolicy: Always              
              env:
              - name: TM_LICHOST
                value: "{{ tm_lichost }}"
              - name: TM_LICPORT
                value: "{{ tm_licport }}"
              - name: TM_LICPASS
                value: "{{ tm_licpass }}"
              volumeMounts:
                - mountPath: /opt/ssstm
                  name: timemachine-volume-mount
#                - mountPath: /etc/ld.so.preload
#                  name: timemachine-configmap
#                  subPath: ld.so.preload              
              securityContext: {}                
              ports:
                - name: timemachine
                  containerPort: 7800
                - name: server-info
                  containerPort: 5777
            volumes:
            - name: timemachine-volume-mount
              persistentVolumeClaim:
                claimName: timemachine-pvc                  
#            - configMap: 
#                defaultMode: 420
#                name: timemachine-configmap
#              name: timemachine-configmap       
          serviceAccountName: timemachine-operator
          serviceAccount: timemachine-operator
        strategy:
          type: Recreate
  when: cluster_provider is defined and cluster_provider == 'ibm'
- name: create service for timemachine
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: timemachine
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: timemachine
      spec:
        selector:
          app: timemachine
        ports:
          - protocol: TCP
            port: 7800
            targetPort: timemachine
#            nodePort: 30454
        type: NodePort
- name: create service for server-info
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: server-info
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: timemachine
      spec:
        selector:
          app: timemachine
        ports:
          - protocol: TCP
            port: 5777
            targetPort: server-info
#            nodePort: 31454
        type: NodePort
- name: create route for timemachine
  k8s:
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: timemachine-route
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: timemachine
      spec:
        host:
        to:
          kind: Service
          name: timemachine
          weight: 100
        port:
          targetPort: 7800
        tls:
          termination: edge
          insecureEdgeTerminationPolicy: Allow
        wildcardPolicy: None
